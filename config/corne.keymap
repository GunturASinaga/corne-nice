/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        layer3 {
            bindings = <&mo 3>;
            key-positions = <37 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE        &kp Q  &kp W  &kp E    &kp R  &kp T           &kp Y      &kp U  &kp I         &kp O    &kp P     &kp BSPC
&kp LEFT_SHIFT    &kp A  &kp S  &kp D    &kp F  &kp G           &kp H      &kp J  &kp K         &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C    &kp V  &kp B           &kp N      &kp M  &kp COMMA     &kp DOT  &kp FSLH  &kp LEFT_SHIFT
                                &kp TAB  &mo 1  &kp LEFT_ALT    &kp SPACE  &mo 2  &kp LEFT_WIN
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE        &kp NUMBER_1    &kp NUMBER_2  &kp NUMBER_3    &kp NUMBER_4  &kp N5       &kp NUMBER_6  &kp N7            &kp N8     &kp N9             &kp N0             &kp EQUAL
&kp RIGHT_SHIFT   &kp LEFT_ALT    &kp DELETE    &kp LEFT_SHIFT  &kp TAB       &trans       &kp LEFT      &kp EQUAL         &kp MINUS  &kp LEFT_BRACKET   &kp RIGHT_BRACKET  &trans
&kp LEFT_CONTROL  &studio_unlock  &trans        &trans          &trans        &trans       &trans        &kp LC(LG(LEFT))  &trans     &kp LC(LG(RIGHT))  &trans             &trans
                                                &kp LGUI        &trans        &kp SPACE    &kp SPACE     &trans            &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1            &kp F1   &kp F2   &kp F3    &kp F4            &kp F5          &kp F6     &kp F7    &kp F8    &kp F9     &kp F10    &kp BSPC
&kp LEFT_SHIFT    &kp F11  &kp F12  &trans    &kp LC(LEFT_WIN)  &trans          &kp MINUS  &kp HOME  &kp UP    &kp END    &kp ENTER  &kp ENTER
&kp LEFT_CONTROL  &trans   &trans   &trans    &trans            &trans          &kp UNDER  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PIPE   &kp LS(LEFT_CONTROL)
                                    &kp LGUI  &trans            &kp LEFT_ALT    &kp RET    &trans    &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_BRI_DEC  &kp C_BRIGHTNESS_DEC  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &bt BT_SEL 0       &bt BT_SEL 1     &bt BT_SEL 2   &bt BT_SEL 3          &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans             &trans           &trans         &trans                &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                                &trans         &trans                &trans          &trans  &trans  &trans
            >;
        };
    };
};
